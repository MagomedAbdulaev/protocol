# Generated by Django 5.0.6 on 2024-06-22 13:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Компания',
                'verbose_name_plural': 'Компании',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Special',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.CharField(choices=[('Водитель', 'Водитель'), ('Машинист крана-манипулятора', 'Машинист крана-манипулятора'), ('Машинист крана автомобильного', 'Машинист крана автомобильного'), ('Машинист  автогидроподъемника', 'Машинист  автогидроподъемника'), ('Машинист экскаватора-погрузчика', 'Машинист экскаватора-погрузчика')], verbose_name='Противопожарный инструктаж')),
                ('number', models.PositiveSmallIntegerField(verbose_name='№ Программы ')),
                ('group_eb', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], default=2, verbose_name='группа ЭБ')),
                ('number_id', models.PositiveBigIntegerField(blank=True, null=True, verbose_name='Номер удостоверения по специальности')),
            ],
            options={
                'verbose_name': 'Специальность',
                'verbose_name_plural': 'Специальности',
                'ordering': ['post', 'number_id'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='protocol_app.company', verbose_name='Компания')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['username', 'date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=80, verbose_name='ФИО')),
                ('date_check', models.DateField(default=django.utils.timezone.now, verbose_name='Дата проверки знаний')),
                ('name_chairman', models.CharField(max_length=80, verbose_name='ФИО председателя комиссии')),
                ('post_chairman', models.CharField(max_length=80, verbose_name='Должность председателя комиссии')),
                ('name_first_member_commission', models.CharField(max_length=80, verbose_name='ФИО 1-го члена комиссии')),
                ('post_first_member_commission', models.CharField(max_length=80, verbose_name='Должность 1-го члена комиссии')),
                ('name_second_member_commission', models.CharField(max_length=80, verbose_name='ФИО 2-го члена комиссии')),
                ('post_second_member_commission', models.CharField(max_length=80, verbose_name='Должность 2-го члена комиссии')),
                ('responsible_electrical_industry', models.CharField(max_length=80, verbose_name='Ответственный за электрохозяйство')),
                ('work_experience', models.PositiveSmallIntegerField(verbose_name='Стаж работы в годах')),
                ('reason', models.CharField(choices=[('Первичная', 'Первичная'), ('Повторная', 'Повторная')], verbose_name='Причина проверки')),
                ('previous_date_eb', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], verbose_name='Укажите предыдущую группу по ЭБ')),
                ('fire_safety_instruction', models.CharField(choices=[('Вводный', 'Вводный'), ('Первичный на рабочем месте', 'Первичный на рабочем месте'), ('Повторный', 'Повторный'), ('Внеплановый', 'Внеплановый'), ('Целевой', 'Целевой')], verbose_name='Противопожарный инструктаж')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='protocol_app.company', verbose_name='Компания')),
                ('special', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='protocol_app.special', verbose_name='Специальность')),
            ],
            options={
                'verbose_name': 'Работник',
                'verbose_name_plural': 'Работники',
                'ordering': ['full_name', 'date_check'],
            },
        ),
        migrations.AddField(
            model_name='company',
            name='specials',
            field=models.ManyToManyField(to='protocol_app.special', verbose_name='Специальности'),
        ),
    ]
